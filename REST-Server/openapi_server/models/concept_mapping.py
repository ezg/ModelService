# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class ConceptMapping(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, model_name=None, variable=None):  # noqa: E501
        """ConceptMapping - a model defined in OpenAPI

        :param model_name: The model_name of this ConceptMapping.  # noqa: E501
        :type model_name: str
        :param variable: The variable of this ConceptMapping.  # noqa: E501
        :type variable: Variable
        """
        self.openapi_types = {
            'model_name': str,
            'variable': Variable
        }

        self.attribute_map = {
            'model_name': 'model_name',
            'variable': 'variable'
        }

        self._model_name = model_name
        self._variable = variable

    @classmethod
    def from_dict(cls, dikt) -> 'ConceptMapping':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ConceptMapping of this ConceptMapping.  # noqa: E501
        :rtype: ConceptMapping
        """
        return util.deserialize_model(dikt, cls)

    @property
    def model_name(self):
        """Gets the model_name of this ConceptMapping.

        A model's name  # noqa: E501

        :return: The model_name of this ConceptMapping.
        :rtype: str
        """
        return self._model_name

    @model_name.setter
    def model_name(self, model_name):
        """Sets the model_name of this ConceptMapping.

        A model's name  # noqa: E501

        :param model_name: The model_name of this ConceptMapping.
        :type model_name: str
        """

        self._model_name = model_name

    @property
    def variable(self):
        """Gets the variable of this ConceptMapping.


        :return: The variable of this ConceptMapping.
        :rtype: Variable
        """
        return self._variable

    @variable.setter
    def variable(self, variable):
        """Sets the variable of this ConceptMapping.


        :param variable: The variable of this ConceptMapping.
        :type variable: Variable
        """

        self._variable = variable
