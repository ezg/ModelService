# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class Concept(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, concept_name=None, mappings=None):  # noqa: E501
        """Concept - a model defined in OpenAPI

        :param concept_name: The concept_name of this Concept.  # noqa: E501
        :type concept_name: str
        :param mappings: The mappings of this Concept.  # noqa: E501
        :type mappings: List[ConceptMapping]
        """
        self.openapi_types = {
            'concept_name': str,
            'mappings': List[ConceptMapping]
        }

        self.attribute_map = {
            'concept_name': 'concept_name',
            'mappings': 'mappings'
        }

        self._concept_name = concept_name
        self._mappings = mappings

    @classmethod
    def from_dict(cls, dikt) -> 'Concept':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Concept of this Concept.  # noqa: E501
        :rtype: Concept
        """
        return util.deserialize_model(dikt, cls)

    @property
    def concept_name(self):
        """Gets the concept_name of this Concept.

        A concept's name  # noqa: E501

        :return: The concept_name of this Concept.
        :rtype: str
        """
        return self._concept_name

    @concept_name.setter
    def concept_name(self, concept_name):
        """Sets the concept_name of this Concept.

        A concept's name  # noqa: E501

        :param concept_name: The concept_name of this Concept.
        :type concept_name: str
        """

        self._concept_name = concept_name

    @property
    def mappings(self):
        """Gets the mappings of this Concept.


        :return: The mappings of this Concept.
        :rtype: List[ConceptMapping]
        """
        return self._mappings

    @mappings.setter
    def mappings(self, mappings):
        """Sets the mappings of this Concept.


        :param mappings: The mappings of this Concept.
        :type mappings: List[ConceptMapping]
        """

        self._mappings = mappings
